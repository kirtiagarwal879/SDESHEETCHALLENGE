/************************************************************

    Following is the Binary Tree node structure:
    
   class TreeNode {
	    int data;
	    TreeNode left;
	    TreeNode right;

	    TreeNode(int data) {
		    this.data = data;
		    this.left = null;
		    this.right = null;
	    }

    }

************************************************************/

import java.util.ArrayList;

public class Solution {
   static  void printLeaves(TreeNode node,ArrayList<Integer> ans)
    {
        if (node == null)
            return;
 
        printLeaves(node.left,ans);
        // Print it if it is a leaf node
        if (node.left == null && node.right == null)
            ans.add(node.data);
        printLeaves(node.right,ans);
    }
 
    // A function to print all left boundary nodes, except a leaf node.
    // Print the nodes in TOP DOWN manner
    static void printBoundaryLeft(TreeNode node,ArrayList<Integer> ans)
    {
        if (node == null)
            return;
 
        if (node.left != null) {
            // to ensure top down order, print the node
            // before calling itself for left subtree
            // System.out.print(node.data + " ");
                ans.add(node.data);
            
            printBoundaryLeft(node.left,ans);
        }
        else if (node.right != null) {
                ans.add(node.data);
            
            // System.out.print(node.data + " ");
            printBoundaryLeft(node.right,ans);
        }
 
        // do nothing if it is a leaf node, this way we avoid
        // duplicates in output
    }
 
    // A function to print all right boundary nodes, except a leaf node
    // Print the nodes in BOTTOM UP manner
    static void printBoundaryRight(TreeNode node,ArrayList <Integer> ans)
    {
        if (node == null)
            return;
 
        if (node.right != null) {
            // to ensure bottom up order, first call for right
            // subtree, then print this node
            printBoundaryRight(node.right,ans);
            ans.add(node.data);
            
        }
        else if (node.left != null) {
            printBoundaryRight(node.left,ans);
                ans.add(node.data);
            
            // System.out.print(node.data + " ");
        }
        // do nothing if it is a leaf node, this way we avoid
        // duplicates in output
    }
	public static  ArrayList<Integer> traverseBoundary(TreeNode node)
    {
		ArrayList <Integer> ans=new ArrayList <Integer>();
         if (node == null)
            return ans;
 
        ans.add((int)node.data);
 
        // Print the left boundary in top-down manner.
        printBoundaryLeft(node.left,ans);
 
        // Print all leaf nodes
        printLeaves(node.left,ans);
        printLeaves(node.right,ans);
 
        // Print the right boundary in bottom-up manner
        printBoundaryRight(node.right,ans);
        
        return ans;
	}
}
