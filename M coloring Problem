import java.util.*;
import java.io.*;
public class Solution {
	public static String graphColoring(int[][] graph, int m) {
	int n=graph.length;
        ArrayList<ArrayList<Integer>> adj=new ArrayList<>();
        for(int i=0;i<n;i++)
        {
            adj.add(new ArrayList<>());
        }
        
        for(int i=0;i<graph.length;i++)
        {
            for(int j=0;j<n;j++)
            {
                int u=graph[i][j];
                if(u==1)
                {
                    adj.get(i).add(j);
                    adj.get(j).add(i);
                }
            }
        }
        int[] color=new int[n];
       if(solver(adj,0,color,n,m)==true)
       {
           return "YES";
       }
        return "NO";
    }
    public static boolean issafe(ArrayList<ArrayList<Integer>> adj,int[] color,int i,int col)
    {
        for(int u:adj.get(i))
        {
            if(color[u]==col)
            {
                return false;
            }
        }
        return true;
    }
    public static boolean solver(ArrayList<ArrayList<Integer>> adj,int vertex,int[] color,int n,int m)
    {
        if(vertex==n)
        {
            return true;
        }
        
        for(int i=1;i<=m;i++)
        {
            if(issafe(adj,color,vertex,i)==true)
            {
               color[vertex]=i;
               if(solver(adj,vertex+1,color,n,m)==true)
               {
                   return true;
               }
               color[vertex]=0;
            }
        }
        return false;
    }
}
