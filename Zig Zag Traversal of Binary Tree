/*
	Following is the class used to represent the object/node of the Binary Tree

	class BinaryTreeNode<T> {
	    T data;
	    BinaryTreeNode<T> left;
	    BinaryTreeNode<T> right;

	    public BinaryTreeNode(T data) {
	        this.data = data;
	    }
	}
*/
import java.util.*;
import  java.io.*;
public class Solution {
	public static List<Integer> zigZagTraversal(BinaryTreeNode<Integer> root) {
		// Write your code here!
        List<Integer> res=new ArrayList<>();
         List<List<Integer>> ans=new ArrayList<>();
        if(root==null)
        {
            return res;
        }
        boolean flag=true;
        Queue<BinaryTreeNode<Integer>> queue=new LinkedList<>();
        queue.add(root);
        
        while(queue.size()!=0)
        {
            int size=queue.size();
            if(flag==true)
            {
            List<Integer> a=new ArrayList<>();
            for(int i=0;i<size;i++)
            {
                BinaryTreeNode curr=queue.poll();
                a.add((int)curr.data);
                if(curr.left!=null)
                {
                    queue.add(curr.left);
                }
                if(curr.right!=null)
                {
                    queue.add(curr.right);
                }
            }
                ans.add(a);
                flag=false;
                
            }
            else
            {
                List<Integer> a=new ArrayList<>();
                Stack<Integer> stack=new Stack<>();
            for(int i=0;i<size;i++)
            {
                BinaryTreeNode curr=queue.poll();
                stack.push((int)curr.data);
                if(curr.left!=null)
                {
                    queue.add(curr.left);
                }
                if(curr.right!=null)
                {
                    queue.add(curr.right);
                }
            }
                while(stack.size()!=0)
                {
                    a.add(stack.pop());
                }
                ans.add(a);
                flag=true;
            }
            
           
        }
       
        for(int i=0;i<ans.size();i++)
        {
            for(int j=0;j<ans.get(i).size();j++)
            {
                res.add((int)ans.get(i).get(j));
            }
        }
        return res;
	}
}
