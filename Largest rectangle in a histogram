import java.util.ArrayList;
import java.util.*;
import java.io.*;

public class Solution {
  public static int largestRectangle(ArrayList < Integer > heights) {
      int[] left=leftside(heights);
      int[] right=rightside(heights);
      int n=heights.size();
      int max=0;
      for(int i=0;i<n;i++)
      {
          int area=(right[i]-left[i]-1)*heights.get(i);
          max=Math.max(area,max);
      }
      return max;
   
  }
    public static int[] rightside(ArrayList<Integer> heights)
    {
         int n=heights.size();
        int[] right=new int[n];
        Stack<Integer> stack=new Stack<>();
        for(int i=n-1;i>=0;i--)
        {
            while(stack.size()!=0 && heights.get(stack.peek())>=heights.get(i))
            {
                stack.pop();
            }
            if(stack.size()!=0)
            {
                right[i]=stack.peek();
            }
            else
            {
                right[i]=n;
            }
            stack.push(i);
            
        }
        return right;
    }
    
    public static int[] leftside(ArrayList<Integer> heights)
    {
        int n=heights.size();
        int[] left=new int[n];
        Stack<Integer> stack=new Stack<>();
        for(int i=0;i<n;i++)
        {
           while(stack.size()!=0 && heights.get(stack.peek())>=heights.get(i))
           {
               stack.pop();
           }
            if(stack.size()!=0)
            {
                left[i]=stack.peek();
            }
            else
            {
                left[i]=-1;
            }
            stack.push(i);
            
        }
        return left;
    }
}
