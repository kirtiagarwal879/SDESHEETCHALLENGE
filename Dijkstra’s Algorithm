import java.util.*;
import java.io.*;

public class Solution {
	public static class pair implements Comparable<pair>{
        
        int v;
        int dist;
        pair(int v,int dist)
        {
           
            this.v=v;
            this.dist=dist;
        }
        public int compareTo(pair o)
        {
            return this.dist-o.dist;
        }
    }
    
	public static ArrayList<Integer> dijkstra(ArrayList<ArrayList<Integer>> vec, int vertices, int edges, int source){
		
        ArrayList<ArrayList<int[]>>  graph=new ArrayList<>();
        for(int i=0;i<vertices;i++)
        {
            graph.add(new ArrayList<>());
        }
        for(int i=0;i<vec.size();i++)
        { int u=vec.get(i).get(0);
                int v=vec.get(i).get(1);
                int d=vec.get(i).get(2);
            int[] a=new int[2];
            a[0]=v;
            a[1]=d;
            graph.get(u).add(a);
            int[] b=new int[2];
         b[0]=u;b[1]=d;
              graph.get(v).add(b);
        }
        PriorityQueue<pair> pq=new PriorityQueue<>();
        ArrayList<Integer> ans=new ArrayList<>();
        int[] distance=new int[vertices];
        pq.add(new pair(source,0));
        boolean[] visited=new boolean[vertices];
        while(pq.size()!=0)
        {
            pair rem=pq.poll();
            if(visited[rem.v]==true)
            {
                continue;
            }
            visited[rem.v]=true;
            distance[rem.v]=rem.dist;
            for(int[] u:graph.get(rem.v))
            {
                if(visited[u[0]]==false)
                {
                    pq.add(new pair(u[0],rem.dist+u[1]));
                }
            }
            
        }
        for(int i=0;i<distance.length;i++)
        {
            
            ans.add(distance[i]);
        }
         for(int i=0;i<ans.size();i++)
        {
            
             if(i!=source && ans.get(i)==0)
            ans.set(i,Integer.MAX_VALUE);
        }
        return ans;
        
	}
}
