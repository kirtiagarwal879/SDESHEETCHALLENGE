/*************************************************************
    Following is the Binary Tree node structure

	class TreeNode<T> {
	    public T data;
	    public TreeNode<T> left;
	    public TreeNode<T> right;

	    TreeNode(T data) {
	        this.data = data;
	        left = null;
	        right = null;
	    }
	}

*************************************************************/
import java.util.*;
import java.io.*;
import java.util.ArrayList;

public class Solution {
    
	public static ArrayList<Integer> predecessorSuccessor(BinaryTreeNode<Integer> root, int key) {
		List<Integer> in=new ArrayList<>();
        helper(in,root);
        int pre=-1;
        int succ=-1;
        for(int i=0;i<in.size();i++)
        {
            if(key==in.get(i))
            {
                if(i>0)
                {
                    pre=in.get(i-1);
                }
                if(i<in.size()-1)
                {
                    succ=in.get(i+1);
                }
            }
        }
        ArrayList<Integer> ans=new ArrayList<>();
        ans.add(pre);
        ans.add(succ);
        return ans;
	}
    public static void helper(List<Integer> ans,BinaryTreeNode<Integer> root)
    {
        if(root==null)
        {
            return;
        }
        helper(ans,root.left);
        ans.add((int)root.data);
        helper(ans,root.right);
    }
}
