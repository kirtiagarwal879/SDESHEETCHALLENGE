import java.util.* ;
import java.io.*; 
public class Solution {
    public static long getInversions(long arr[], int n) {
        // Write your code here.
          long[] temp=new long[n];
            
            return merge_sort(arr,temp,0,n-1);
    }
    public static long merge_sort(long[] arr,long[] temp,int start,int end)
    {
        long count=0;
        if(end>start)
        {
            int mid=(start+end)/2;
            count=count+merge_sort(arr,temp,start,mid);
            count=count+merge_sort(arr,temp,mid+1,end);
            count=count+merge(arr,temp,start,mid+1,end);
        }
        return count;
    }
    public static long merge(long[] arr,long[] temp,int start,int mid ,int end)
    {
        long count=0;
        int i=start;
        int j=mid;
        int k=start;
        while(i<mid && j<=end)
        {
            if(arr[i]<=arr[j])
            {
                temp[k]=arr[i];
                k++;
                i++;
            }
            else
            {
                temp[k]=arr[j];
                k++;
                j++;
                count=count+(mid-i);
            }
        }
        while(i<mid)
        {
            temp[k]=arr[i];
                k++;
                i++;
        }
        while(j<=end)
        {
            temp[k]=arr[j];
                k++;
                j++; 
        }
        
        for(int q=start;q<=end;q++)
        {
            arr[q]=temp[q];
        }
        
        return count;
        
        
    }
}
