/************************************************************

    Following is the TreeNode class structure:

    class BinaryTreeNode {
		int val;
		BinaryTreeNode left;
		BinaryTreeNode right;

		BinaryTreeNode(int val) {
			this.val = val;
			this.left = null;
			this.right = null;
		}
	}

************************************************************/
import java.util.*;
import java.io.*;
public class Solution {
	public static ArrayList<Integer> getTopView(BinaryTreeNode root) {
		ArrayList<Integer> ans=new ArrayList<>();
        List<List<Integer>> r=verticalTraversal(root);
        for(int i=0;i<r.size();i++)
        {
            ans.add((int)r.get(i).get(0));
        }
        return ans;
	}
   
     public static class pair
    {
       BinaryTreeNode r=null;
        int i;
        pair(BinaryTreeNode r,int i)
        {
            this.r=r;
            this.i=i;
        }
    }
    public static List<List<Integer>> verticalTraversal(BinaryTreeNode root) {
        int min=Integer.MAX_VALUE;
        int max=Integer.MIN_VALUE;
        HashMap<Integer,List<Integer>> map=new HashMap<>();
        List<List<Integer>> ans=new ArrayList<>();
        if(root==null)
        {
            return ans;
        }
        Queue<pair> queue=new LinkedList<>();
        queue.add(new pair(root,0));
        
        while(queue.size()>0)
        {
            int size=queue.size();
            for(int i=0;i<size;i++)
            {
            pair curr=queue.poll();
            BinaryTreeNode v=curr.r;
            int c=curr.i;
            min=Math.min(min,c);
            max=Math.max(max,c);
            if(map.containsKey(c))
            {
               map.get(c).add((int)v.val);
                
            }
            else
            {
                List<Integer> arr=new ArrayList<>();
                map.put(c,arr);
                map.get(c).add((int)v.val);
            }
            
            if(v.left!=null)
            {
                queue.add(new pair(v.left,c-1));
            }
            if(v.right!=null)
            {
                queue.add(new pair(v.right,c+1));
            }
            }
           
        }
        
        for(int i=min;i<=max;i++)
        {
            List<Integer> a=map.get(i);
            ans.add(a);
        }
        
        return ans;
        
    }
}
