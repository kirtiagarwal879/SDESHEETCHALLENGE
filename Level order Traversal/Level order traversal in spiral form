/*

	Following is the structure used to represent the Binary Tree Node

	class BinaryTreeNode<T> {
		T val;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T val) {
			this.val = val;
			this.left = null;
			this.right = null;
		}
	}

*/

import java.util.ArrayList;
import java.util.*;
import java.io.*;

public class Solution {

  public static ArrayList<Integer> getLevelOrder(BinaryTreeNode root) {
    ArrayList<Integer> ans=new ArrayList<>();
        if(root==null)
        {
            return ans;
        }
        
        Queue<BinaryTreeNode> queue=new LinkedList<>();
        queue.add(root);
        while(queue.size()!=0)
        {
            int size=queue.size();
            
            for(int i=0;i<size;i++)
            {
                BinaryTreeNode curr=queue.poll();
                 ans.add(curr.val);
                if(curr.left!=null)
                {
                    queue.add(curr.left);
                }
                if(curr.right!=null)
                {
                    queue.add(curr.right);
                }
            }
           
        }
        return ans;
  }

}
