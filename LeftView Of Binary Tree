/************************************************************

    Following is the TreeNode class structure

    class TreeNode<T> 
    {
       public:
        T data;
        TreeNode<T> left;
        TreeNode<T> right;

        TreeNode(T data) 
        {
            this.data = data;
            left = null;
            right = null;
        }
    };

************************************************************/

import java.util.ArrayList;
import java.io.*;
import java.util.*;

public class Solution 
{
    public static ArrayList<Integer> getLeftView(TreeNode<Integer> root) 
    {
       return verticalTraversal(root);
    }
     public static class pair
    {
       TreeNode r=null;
        int i;
        pair(TreeNode r,int i)
        {
            this.r=r;
            this.i=i;
        }
    }
    public static ArrayList<Integer> verticalTraversal(TreeNode root) {
        
        ArrayList<Integer> ans=new ArrayList<>();
           if(root==null)
        {
            return ans;
        }
        Queue<pair> queue=new LinkedList<>();
        queue.add(new pair(root,0));
        
        while(queue.size()>0)
        {
            int size=queue.size();
            for(int i=0;i<size;i++)
            {
            pair curr=queue.poll();
            TreeNode v=curr.r;
            int c=curr.i;
                if(i==0)
                {
                    ans.add((int)v.data);
                }
       
            if(v.left!=null)
            {
                queue.add(new pair(v.left,c-1));
            }
            if(v.right!=null)
            {
                queue.add(new pair(v.right,c+1));
            }
            }
           
        }
        
     
        
        return ans;
        
    }
}
