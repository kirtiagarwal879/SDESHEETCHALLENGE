/*********************************************

    class BinaryTreeNode {
        int val;
        BinaryTreeNode left;
        BinaryTreeNode right;

        BinaryTreeNode(int val) {
            this.val = val;
            this.left = null;
            this.right = null;
        }
    }

*********************************************/
import java.util.*;
import java.io.*;

public class Solution {
    public static class vpair{
        BinaryTreeNode node=null;
        int h1=0;
        vpair(BinaryTreeNode node,int h1)
        {
            this.node=node;
            this.h1=h1;
        }
    }
    public static ArrayList<Integer> bottomView(BinaryTreeNode root) {
        ArrayList<Integer> ans=new ArrayList<>();
        if(root==null)return ans;
        if(root.left==null  && root.right==null)
        {
            ans.add((int)root.val);
            return ans;
        }
        HashMap<Integer,ArrayList<Integer>> map=new HashMap<>();
         Queue<vpair> queue=new LinkedList<>();
         int max=0;
         int min=0;
         queue.add(new vpair(root,0));
         while(queue.size()!=0)
         {
             vpair curr=queue.poll();
             min=Math.min(min,curr.h1);
              max=Math.max(max,curr.h1);
             map.putIfAbsent(curr.h1,new ArrayList<>());
            map.get(curr.h1).add((int)curr.node.val);
           
             if(curr.node.left!=null)
             {
                 queue.add(new vpair(curr.node.left,curr.h1-1));
             }
             if(curr.node.right!=null)
             {
                 queue.add(new vpair(curr.node.right,curr.h1+1));
             }
         }
         for(int i=min;i<=max;i++)
         {
             ArrayList<Integer> a=map.get(i);
             int k=a.size();
             
             if(k>0)
             ans.add(a.get(a.size()-1));
         }
        return ans;       
    }
}
