import java.util.*;
import java.io.*;

public class Solution {
    
    public static String cycleDetection(int[][] edges, int n, int m) {
        ArrayList<ArrayList<Integer>> graph=new ArrayList<>();
        for(int i=0;i<n;i++)
        {
            graph.add(new ArrayList<>());
        }
        for(int i=0;i<edges.length;i++)
        {
            int u=edges[i][0];
            int v=edges[i][1];
            graph.get(u-1).add(v-1);
            graph.get(v-1).add(u-1);
        }   
          
       boolean[] visited=new boolean[n];
        
        for(int i=0;i<n;i++)
        {
            if(visited[i]==false)
            {
                if(helper(-1,i,visited,graph)==true)
                {
                    return "Yes";
                }
            }
        }
        return "No";
    }
    
    public static boolean helper(int par,int i,boolean[] visited,ArrayList<ArrayList<Integer>> graph)
    {
        visited[i]=true;
        for(int u:graph.get(i))
        {
            if(visited[u]==false)
            {
                if(helper(i,u,visited,graph)==true)
                {
                    return true;
                }
               
            }
            else if(u!=par)
            {
                return true;
            }
        }
        return false;
    }
    
}
